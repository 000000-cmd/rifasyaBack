name: Deploy Spring Boot App to AWS EC2

on:
  push:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'corretto'

    - name: Build with Maven
      run: mvn clean package

    - name: Deploy to EC2
      uses: easingthemes/ssh-deploy@main
      with:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        REMOTE_HOST: ${{ secrets.EC2_HOST }}
        REMOTE_USER: ${{ secrets.EC2_USER }}
        SOURCE: "target/*.jar"
        TARGET: "/home/${{ secrets.EC2_USER }}"
        SCRIPT_AFTER: |
          echo "--- Despliegue en el servidor iniciado ---"
          
          # 1. Detener cualquier proceso Java anterior
          PID=$(pgrep -f 'java -jar')
          if [ -n "$PID" ]; then
            echo "Deteniendo proceso anterior con PID: $PID"
            kill -9 $PID
          fi
          
          # 2. Navegar al directorio de despliegue
          cd /home/${{ secrets.EC2_USER }}
          
          # 3. Encontrar el nombre del JAR más reciente que se acaba de subir
          NEW_JAR=$(ls -t *.jar | head -n 1)
          echo "El nuevo JAR a ejecutar es: $NEW_JAR"
          
          # 4. (Opcional pero recomendado) Limpiar los JARs antiguos
          # Esto elimina todos los archivos .jar excepto el más reciente
          ls *.jar | grep -v "$NEW_JAR" | xargs -r rm
          echo "JARs antiguos eliminados."
          
          # 5. Iniciar la nueva versión del JAR por su nombre específico
          echo "Iniciando nueva versión..."
          nohup java -Xmx1g -jar "$NEW_JAR" > app.log 2>&1 &
          echo "--- Despliegue completado ---"
